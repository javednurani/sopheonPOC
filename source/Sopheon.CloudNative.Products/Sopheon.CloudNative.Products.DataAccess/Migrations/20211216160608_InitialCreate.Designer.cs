// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Sopheon.CloudNative.Products.Domain;

#nullable disable

namespace Sopheon.CloudNative.Products.DataAccess.Migrations
{
    [DbContext(typeof(ProductManagementContext))]
    [Migration("20211216160608_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("SPM")
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attribute", b =>
                {
                    b.Property<int>("AttributeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeId"), 1L, 1);

                    b.Property<int>("AttributeDataTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeId");

                    b.HasIndex("AttributeDataTypeId");

                    b.ToTable("Attribute", "SPM");

                    b.HasDiscriminator<int>("AttributeDataTypeId");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.AttributeDataType", b =>
                {
                    b.Property<int>("AttributeDataTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttributeDataTypeId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AttributeDataTypeId");

                    b.ToTable("AttributeDataType", "SPM");

                    b.HasData(
                        new
                        {
                            AttributeDataTypeId = 1,
                            Name = "String"
                        },
                        new
                        {
                            AttributeDataTypeId = 2,
                            Name = "Int32"
                        },
                        new
                        {
                            AttributeDataTypeId = 3,
                            Name = "Decimal"
                        },
                        new
                        {
                            AttributeDataTypeId = 4,
                            Name = "Money"
                        },
                        new
                        {
                            AttributeDataTypeId = 5,
                            Name = "UtcDateTime"
                        },
                        new
                        {
                            AttributeDataTypeId = 6,
                            Name = "MarkdownString"
                        },
                        new
                        {
                            AttributeDataTypeId = 7,
                            Name = "EnumCollection"
                        },
                        new
                        {
                            AttributeDataTypeId = 8,
                            Name = "Enum"
                        });
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttributeOption", b =>
                {
                    b.Property<int>("EnumAttributeOptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EnumAttributeOptionId"), 1L, 1);

                    b.Property<int>("AttributeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EnumAttributeOptionId");

                    b.HasIndex("AttributeId", "Name")
                        .IsUnique()
                        .HasFilter("[Name] IS NOT NULL");

                    b.ToTable("EnumAttributeOption", "SPM");

                    b.HasData(
                        new
                        {
                            EnumAttributeOptionId = -31,
                            AttributeId = -4,
                            Name = "Not Started"
                        },
                        new
                        {
                            EnumAttributeOptionId = -32,
                            AttributeId = -4,
                            Name = "In Progress"
                        },
                        new
                        {
                            EnumAttributeOptionId = -33,
                            AttributeId = -4,
                            Name = "Assigned"
                        },
                        new
                        {
                            EnumAttributeOptionId = -34,
                            AttributeId = -4,
                            Name = "Complete"
                        },
                        new
                        {
                            EnumAttributeOptionId = -1,
                            AttributeId = -1,
                            Name = "Advertising"
                        },
                        new
                        {
                            EnumAttributeOptionId = -2,
                            AttributeId = -1,
                            Name = "Agriculture & Forestry"
                        },
                        new
                        {
                            EnumAttributeOptionId = -3,
                            AttributeId = -1,
                            Name = "Construction"
                        },
                        new
                        {
                            EnumAttributeOptionId = -4,
                            AttributeId = -1,
                            Name = "Education - Higher Ed"
                        },
                        new
                        {
                            EnumAttributeOptionId = -5,
                            AttributeId = -1,
                            Name = "Education - K12"
                        },
                        new
                        {
                            EnumAttributeOptionId = -6,
                            AttributeId = -1,
                            Name = "Energy, Mining, Oil & Gas"
                        },
                        new
                        {
                            EnumAttributeOptionId = -7,
                            AttributeId = -1,
                            Name = "Financial Services"
                        },
                        new
                        {
                            EnumAttributeOptionId = -8,
                            AttributeId = -1,
                            Name = "Government - Federal"
                        },
                        new
                        {
                            EnumAttributeOptionId = -9,
                            AttributeId = -1,
                            Name = "Government - Local"
                        },
                        new
                        {
                            EnumAttributeOptionId = -10,
                            AttributeId = -1,
                            Name = "Government - Military"
                        },
                        new
                        {
                            EnumAttributeOptionId = -11,
                            AttributeId = -1,
                            Name = "Government - State"
                        },
                        new
                        {
                            EnumAttributeOptionId = -12,
                            AttributeId = -1,
                            Name = "Health Care"
                        },
                        new
                        {
                            EnumAttributeOptionId = -13,
                            AttributeId = -1,
                            Name = "Insurance"
                        },
                        new
                        {
                            EnumAttributeOptionId = -14,
                            AttributeId = -1,
                            Name = "Manufacturing - Aerospace"
                        },
                        new
                        {
                            EnumAttributeOptionId = -15,
                            AttributeId = -1,
                            Name = "Manufacturing - Automotive"
                        },
                        new
                        {
                            EnumAttributeOptionId = -16,
                            AttributeId = -1,
                            Name = "Manufacturing - Consumer Goods"
                        },
                        new
                        {
                            EnumAttributeOptionId = -17,
                            AttributeId = -1,
                            Name = "Manufacturing - Industrial"
                        },
                        new
                        {
                            EnumAttributeOptionId = -18,
                            AttributeId = -1,
                            Name = "Media & Entertainment"
                        },
                        new
                        {
                            EnumAttributeOptionId = -19,
                            AttributeId = -1,
                            Name = "Membership Organizations"
                        },
                        new
                        {
                            EnumAttributeOptionId = -20,
                            AttributeId = -1,
                            Name = "Non-Profit"
                        },
                        new
                        {
                            EnumAttributeOptionId = -21,
                            AttributeId = -1,
                            Name = "Pharmaceuticals & Biotech"
                        },
                        new
                        {
                            EnumAttributeOptionId = -22,
                            AttributeId = -1,
                            Name = "Professional & Technical Services"
                        },
                        new
                        {
                            EnumAttributeOptionId = -23,
                            AttributeId = -1,
                            Name = "Real Estate, Rental & Leasing"
                        },
                        new
                        {
                            EnumAttributeOptionId = -24,
                            AttributeId = -1,
                            Name = "Retail"
                        },
                        new
                        {
                            EnumAttributeOptionId = -25,
                            AttributeId = -1,
                            Name = "Technology Hardware"
                        },
                        new
                        {
                            EnumAttributeOptionId = -26,
                            AttributeId = -1,
                            Name = "Technology Software & Services"
                        },
                        new
                        {
                            EnumAttributeOptionId = -27,
                            AttributeId = -1,
                            Name = "Telecommunications"
                        },
                        new
                        {
                            EnumAttributeOptionId = -28,
                            AttributeId = -1,
                            Name = "Transportation & Warehousing"
                        },
                        new
                        {
                            EnumAttributeOptionId = -29,
                            AttributeId = -1,
                            Name = "Travel, Leisure & Hospitality"
                        },
                        new
                        {
                            EnumAttributeOptionId = -30,
                            AttributeId = -1,
                            Name = "Utilities"
                        });
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.FileAttachment", b =>
                {
                    b.Property<int>("FileAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileAttachmentId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("FileAttachmentId");

                    b.HasIndex("ProductId");

                    b.ToTable("FileAttachment", "SPM");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Goal", "SPM");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("Key")
                        .IsUnique()
                        .HasFilter("[Key] IS NOT NULL");

                    b.ToTable("Products", "SPM");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.ProductItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductItemTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("RankId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductItemTypeId");

                    b.HasIndex("RankId");

                    b.ToTable("ProductItem", "SPM");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.ProductItemType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ProductItemType", "SPM");

                    b.HasData(
                        new
                        {
                            Id = -3,
                            Name = "Risk"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Feature"
                        },
                        new
                        {
                            Id = -1,
                            Name = "Task"
                        });
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Rank", b =>
                {
                    b.Property<int>("RankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RankId"), 1L, 1);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RankId");

                    b.ToTable("Rank", "SPM");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Release", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Release", "SPM");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status", "SPM");

                    b.HasData(
                        new
                        {
                            Id = -2,
                            Name = "Closed"
                        },
                        new
                        {
                            Id = -1,
                            Name = "Open"
                        });
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.UrlLink", b =>
                {
                    b.Property<int>("UrlLinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UrlLinkId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("UrlLinkId");

                    b.HasIndex("ProductId");

                    b.ToTable("UrlLink", "SPM");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attributes.Decimal.DecimalAttribute", b =>
                {
                    b.HasBaseType("Sopheon.CloudNative.Products.Domain.Attribute");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttribute", b =>
                {
                    b.HasBaseType("Sopheon.CloudNative.Products.Domain.Attribute");

                    b.HasDiscriminator().HasValue(8);

                    b.HasData(
                        new
                        {
                            AttributeId = -4,
                            AttributeDataTypeId = 0,
                            Name = "Status",
                            ShortName = "STATUS"
                        });
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumCollectionAttribute", b =>
                {
                    b.HasBaseType("Sopheon.CloudNative.Products.Domain.Attribute");

                    b.HasDiscriminator().HasValue(7);

                    b.HasData(
                        new
                        {
                            AttributeId = -1,
                            AttributeDataTypeId = 0,
                            Name = "Industry",
                            ShortName = "IND"
                        });
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attributes.Int32.Int32Attribute", b =>
                {
                    b.HasBaseType("Sopheon.CloudNative.Products.Domain.Attribute");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attributes.Money.MoneyAttribute", b =>
                {
                    b.HasBaseType("Sopheon.CloudNative.Products.Domain.Attribute");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attributes.String.StringAttribute", b =>
                {
                    b.HasBaseType("Sopheon.CloudNative.Products.Domain.Attribute");

                    b.HasDiscriminator().HasValue(1);

                    b.HasData(
                        new
                        {
                            AttributeId = -2,
                            AttributeDataTypeId = 0,
                            Name = "Notes",
                            ShortName = "NOTES"
                        });
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attributes.UtcDateTime.UtcDateTimeAttribute", b =>
                {
                    b.HasBaseType("Sopheon.CloudNative.Products.Domain.Attribute");

                    b.HasDiscriminator().HasValue(5);

                    b.HasData(
                        new
                        {
                            AttributeId = -3,
                            AttributeDataTypeId = 0,
                            Name = "Due Date",
                            ShortName = "DUE"
                        });
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attribute", b =>
                {
                    b.HasOne("Sopheon.CloudNative.Products.Domain.AttributeDataType", "AttributeDataType")
                        .WithMany()
                        .HasForeignKey("AttributeDataTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AttributeDataType");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttributeOption", b =>
                {
                    b.HasOne("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttribute", null)
                        .WithMany("EnumAttributeOptions")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumCollectionAttribute", null)
                        .WithMany("EnumAttributeOptions")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.FileAttachment", b =>
                {
                    b.HasOne("Sopheon.CloudNative.Products.Domain.Product", null)
                        .WithMany("FileAttachments")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Goal", b =>
                {
                    b.HasOne("Sopheon.CloudNative.Products.Domain.Product", null)
                        .WithMany("Goals")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Product", b =>
                {
                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.KeyPerformanceIndicator", "KeyPerformanceIndicators", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<int>("KeyPerformanceIndicatorId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("KeyPerformanceIndicatorId"), 1L, 1);

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.HasKey("ProductId", "KeyPerformanceIndicatorId");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("KeyPerformanceIndicator", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attributes.Decimal.DecimalAttribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.Navigation("Attribute");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Decimal.DecimalAttributeValue", "DecimalAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<decimal?>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("Products_DecimalAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.Navigation("Attribute");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttributeValue", "EnumAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<int>("EnumAttributeOptionId")
                                .HasColumnType("int");

                            b1.HasKey("ProductId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.HasIndex("EnumAttributeOptionId");

                            b1.ToTable("Products_EnumAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttributeOption", "Value")
                                .WithMany()
                                .HasForeignKey("EnumAttributeOptionId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.Navigation("Attribute");

                            b1.Navigation("Value");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumCollectionAttributeValue", "EnumCollectionAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductEnumCollectionAttributeValueId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("ProductEnumCollectionAttributeValueId"), 1L, 1);

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.HasKey("ProductEnumCollectionAttributeValueId");

                            b1.HasIndex("AttributeId");

                            b1.HasIndex("ProductId");

                            b1.ToTable("Products_EnumCollectionAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttributeOptionValue", "Value", b2 =>
                                {
                                    b2.Property<int>("ProductEnumCollectionAttributeValueId")
                                        .HasColumnType("int");

                                    b2.Property<int>("EnumAttributeOptionId")
                                        .HasColumnType("int");

                                    b2.HasKey("ProductEnumCollectionAttributeValueId", "EnumAttributeOptionId");

                                    b2.HasIndex("EnumAttributeOptionId");

                                    b2.ToTable("Products_EnumCollectionAttributeValues_Value", "SPM");

                                    b2.HasOne("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttributeOption", "EnumAttributeOption")
                                        .WithMany()
                                        .HasForeignKey("EnumAttributeOptionId")
                                        .OnDelete(DeleteBehavior.NoAction)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("ProductEnumCollectionAttributeValueId");

                                    b2.Navigation("EnumAttributeOption");
                                });

                            b1.Navigation("Attribute");

                            b1.Navigation("Value");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Int32.Int32AttributeValue", "Int32AttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<int?>("Value")
                                .HasColumnType("int");

                            b1.HasKey("ProductId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("Products_Int32AttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.Navigation("Attribute");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Money.MoneyAttributeValue", "MoneyAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.HasKey("ProductId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("Products_MoneyAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.OwnsOne("Sopheon.CloudNative.Products.Domain.Attributes.Money.MoneyValue", "Value", b2 =>
                                {
                                    b2.Property<int>("MoneyAttributeValueProductId")
                                        .HasColumnType("int");

                                    b2.Property<int>("MoneyAttributeValueAttributeId")
                                        .HasColumnType("int");

                                    b2.Property<string>("CurrencyCode")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("CurrencyCode");

                                    b2.Property<decimal?>("Value")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("Value");

                                    b2.HasKey("MoneyAttributeValueProductId", "MoneyAttributeValueAttributeId");

                                    b2.ToTable("Products_MoneyAttributeValues", "SPM");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyAttributeValueProductId", "MoneyAttributeValueAttributeId");
                                });

                            b1.Navigation("Attribute");

                            b1.Navigation("Value");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.String.StringAttributeValue", "StringAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("Products_StringAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.Navigation("Attribute");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.UtcDateTime.UtcDateTimeAttributeValue", "UtcDateTimeAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ProductId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("Products_UtcDateTimeAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductId");

                            b1.Navigation("Attribute");
                        });

                    b.Navigation("DecimalAttributeValues");

                    b.Navigation("EnumAttributeValues");

                    b.Navigation("EnumCollectionAttributeValues");

                    b.Navigation("Int32AttributeValues");

                    b.Navigation("KeyPerformanceIndicators");

                    b.Navigation("MoneyAttributeValues");

                    b.Navigation("StringAttributeValues");

                    b.Navigation("UtcDateTimeAttributeValues");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.ProductItem", b =>
                {
                    b.HasOne("Sopheon.CloudNative.Products.Domain.Product", null)
                        .WithMany("Items")
                        .HasForeignKey("ProductId");

                    b.HasOne("Sopheon.CloudNative.Products.Domain.ProductItemType", "ProductItemType")
                        .WithMany()
                        .HasForeignKey("ProductItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Sopheon.CloudNative.Products.Domain.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId");

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Decimal.DecimalAttributeValue", "DecimalAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductItemId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<decimal?>("Value")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("ProductItemId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("ProductItem_DecimalAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductItemId");

                            b1.Navigation("Attribute");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttributeValue", "EnumAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductItemId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<int>("EnumAttributeOptionId")
                                .HasColumnType("int");

                            b1.HasKey("ProductItemId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.HasIndex("EnumAttributeOptionId");

                            b1.ToTable("ProductItem_EnumAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttributeOption", "Value")
                                .WithMany()
                                .HasForeignKey("EnumAttributeOptionId")
                                .OnDelete(DeleteBehavior.NoAction)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductItemId");

                            b1.Navigation("Attribute");

                            b1.Navigation("Value");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumCollectionAttributeValue", "EnumCollectionAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductItemEnumCollectionAttributeValueId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("ProductItemEnumCollectionAttributeValueId"), 1L, 1);

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<int>("ProductItemId")
                                .HasColumnType("int");

                            b1.HasKey("ProductItemEnumCollectionAttributeValueId");

                            b1.HasIndex("AttributeId");

                            b1.HasIndex("ProductItemId");

                            b1.ToTable("ProductItem_EnumCollectionAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductItemId");

                            b1.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttributeOptionValue", "Value", b2 =>
                                {
                                    b2.Property<int>("ProductItemEnumCollectionAttributeValueId")
                                        .HasColumnType("int");

                                    b2.Property<int>("EnumAttributeOptionId")
                                        .HasColumnType("int");

                                    b2.HasKey("ProductItemEnumCollectionAttributeValueId", "EnumAttributeOptionId");

                                    b2.HasIndex("EnumAttributeOptionId");

                                    b2.ToTable("ProductItem_EnumCollectionAttributeValues_Value", "SPM");

                                    b2.HasOne("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttributeOption", "EnumAttributeOption")
                                        .WithMany()
                                        .HasForeignKey("EnumAttributeOptionId")
                                        .OnDelete(DeleteBehavior.NoAction)
                                        .IsRequired();

                                    b2.WithOwner()
                                        .HasForeignKey("ProductItemEnumCollectionAttributeValueId");

                                    b2.Navigation("EnumAttributeOption");
                                });

                            b1.Navigation("Attribute");

                            b1.Navigation("Value");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Int32.Int32AttributeValue", "Int32AttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductItemId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<int?>("Value")
                                .HasColumnType("int");

                            b1.HasKey("ProductItemId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("ProductItem_Int32AttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductItemId");

                            b1.Navigation("Attribute");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.Money.MoneyAttributeValue", "MoneyAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductItemId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.HasKey("ProductItemId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("ProductItem_MoneyAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductItemId");

                            b1.OwnsOne("Sopheon.CloudNative.Products.Domain.Attributes.Money.MoneyValue", "Value", b2 =>
                                {
                                    b2.Property<int>("MoneyAttributeValueProductItemId")
                                        .HasColumnType("int");

                                    b2.Property<int>("MoneyAttributeValueAttributeId")
                                        .HasColumnType("int");

                                    b2.Property<string>("CurrencyCode")
                                        .HasColumnType("nvarchar(max)")
                                        .HasColumnName("CurrencyCode");

                                    b2.Property<decimal?>("Value")
                                        .HasColumnType("decimal(18,2)")
                                        .HasColumnName("Value");

                                    b2.HasKey("MoneyAttributeValueProductItemId", "MoneyAttributeValueAttributeId");

                                    b2.ToTable("ProductItem_MoneyAttributeValues", "SPM");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyAttributeValueProductItemId", "MoneyAttributeValueAttributeId");
                                });

                            b1.Navigation("Attribute");

                            b1.Navigation("Value");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.String.StringAttributeValue", "StringAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductItemId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ProductItemId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("ProductItem_StringAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductItemId");

                            b1.Navigation("Attribute");
                        });

                    b.OwnsMany("Sopheon.CloudNative.Products.Domain.Attributes.UtcDateTime.UtcDateTimeAttributeValue", "UtcDateTimeAttributeValues", b1 =>
                        {
                            b1.Property<int>("ProductItemId")
                                .HasColumnType("int");

                            b1.Property<int>("AttributeId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Value")
                                .HasColumnType("datetime2");

                            b1.HasKey("ProductItemId", "AttributeId");

                            b1.HasIndex("AttributeId");

                            b1.ToTable("ProductItem_UtcDateTimeAttributeValues", "SPM");

                            b1.HasOne("Sopheon.CloudNative.Products.Domain.Attribute", "Attribute")
                                .WithMany()
                                .HasForeignKey("AttributeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("ProductItemId");

                            b1.Navigation("Attribute");
                        });

                    b.Navigation("DecimalAttributeValues");

                    b.Navigation("EnumAttributeValues");

                    b.Navigation("EnumCollectionAttributeValues");

                    b.Navigation("Int32AttributeValues");

                    b.Navigation("MoneyAttributeValues");

                    b.Navigation("ProductItemType");

                    b.Navigation("Rank");

                    b.Navigation("StringAttributeValues");

                    b.Navigation("UtcDateTimeAttributeValues");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Release", b =>
                {
                    b.HasOne("Sopheon.CloudNative.Products.Domain.Product", null)
                        .WithMany("Releases")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.UrlLink", b =>
                {
                    b.HasOne("Sopheon.CloudNative.Products.Domain.Product", null)
                        .WithMany("UrlLinks")
                        .HasForeignKey("ProductId");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Product", b =>
                {
                    b.Navigation("FileAttachments");

                    b.Navigation("Goals");

                    b.Navigation("Items");

                    b.Navigation("Releases");

                    b.Navigation("UrlLinks");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumAttribute", b =>
                {
                    b.Navigation("EnumAttributeOptions");
                });

            modelBuilder.Entity("Sopheon.CloudNative.Products.Domain.Attributes.Enum.EnumCollectionAttribute", b =>
                {
                    b.Navigation("EnumAttributeOptions");
                });
#pragma warning restore 612, 618
        }
    }
}
