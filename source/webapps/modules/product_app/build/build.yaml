name: $(SourceBranchName)-$(Date:yyyyMMdd).$(rev:rrr)

pool:
  name: Default

trigger:
  branches:
    exclude:
    - master
  paths:
    include:
    - source/webapps/modules/product_app

steps:
- powershell: |
    # If running in a pipeline then use the Agent Home directory,
    # otherwise use the machine temp folder which is useful for testing
    if ($env:AGENT_HOMEDIRECTORY -ne $null) { $TargetFolder = $env:AGENT_HOMEDIRECTORY }
    else { $TargetFolder = [System.Environment]::GetEnvironmentVariable('TEMP','Machine') }
    # Loop through each CA in the machine store
    Get-ChildItem -Path Cert:\LocalMachine\CA | ForEach-Object {
        # Convert cert's bytes to Base64-encoded text and add begin/end markers
        $Cert = "-----BEGIN CERTIFICATE-----`n"
        $Cert+= $([System.Convert]::ToBase64String($_.export([System.Security.Cryptography.X509Certificates.X509ContentType]::Cert),'InsertLineBreaks'))
        $Cert+= "`n-----END CERTIFICATE-----`n"
        # Append cert to chain
        $Chain+= $Cert
    }
    # Build target path
    $CertFile = "$TargetFolder\TrustedRootCAs.pem"
    # Write to file system
    $Chain | Out-File $CertFile -Force -Encoding ASCII
    # Clean-up
    $Chain = $null
    # Let Node (running later in the pipeline) know from where to read certs
    Write-Host "##vso[task.setvariable variable=NODE.EXTRA.CA.CERTS]$CertFile"
  displayName: 'Machine Cert'

- powershell: |
    Write-Host "License check in folder: $(System.DefaultWorkingDirectory)/source/webapps/packages/shell-api"
    node C:\Windows\ServiceProfiles\NetworkService\AppData\Roaming\npm\node_modules\license-checker\bin\license-checker --start "$(System.DefaultWorkingDirectory)/source/webapps/packages/shell-api" --out $(Build.ArtifactStagingDirectory)\shell_api_licenses.csv --csv --failOn 'GPL'    
    Write-Host "License check in folder: $(System.DefaultWorkingDirectory)/source/webapps/packages/shared-ui"
    node C:\Windows\ServiceProfiles\NetworkService\AppData\Roaming\npm\node_modules\license-checker\bin\license-checker --start "$(System.DefaultWorkingDirectory)/source/webapps/packages/shared-ui" --out $(Build.ArtifactStagingDirectory)\shared_ui_licenses.csv --csv --failOn 'GPL'    
    Write-Host "License check in folder: $(System.DefaultWorkingDirectory)/source/webapps/modules/app"
    node C:\Windows\ServiceProfiles\NetworkService\AppData\Roaming\npm\node_modules\license-checker\bin\license-checker --start "$(System.DefaultWorkingDirectory)/source/webapps/modules/app" --out $(Build.ArtifactStagingDirectory)\shell_app_licenses.csv --csv --failOn 'GPL'  
  displayName: 'License Checker - Packages and App'

- task: AzureCLI@2
  displayName: 'Build Product App'
  inputs:
    azureSubscription: 'Sopheon Dev'
    scriptType: ps
    scriptPath: source/webapps/modules/product_app/build/Build.ps1

- task: PublishTestResults@2
  displayName: 'Publish Test Results'
  inputs:
    testResultsFiles: source/webapps/modules/product_app/junit.xml
    failTaskOnFailedTests: true
  condition: succeededOrFailed()

- task: PublishCodeCoverageResults@1
  displayName: 'Publish code coverage'
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: '**/coverage/cobertura-coverage.xml'
  condition: succeededOrFailed()

- task: mspremier.BuildQualityChecks.QualityChecks-task.BuildQualityChecks@8
  displayName: 'Check build quality'
  inputs:
    checkCoverage: true
    coverageFailOption: fixed
    coverageType: lines
    treat0of0as100: true
  enabled: false

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifact: app'
  inputs:
    ArtifactName: App